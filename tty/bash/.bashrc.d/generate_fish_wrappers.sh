#!/bin/bash

# TODO: UPDATE regex to find functions defined with the functions keyword
generate_fish_wrappers() {
    # Inputs
    local BASHRC_DIR="$HOME/.bashrc.d"
    local FISH_WRAPPER_FILE="$HOME/.config/fish/bash/bash_wrappers.fish"
    local DEBUG=0
    local SILENT=1

    # TYPE OF WRAPPER
    local TYPE=0 # How should the wrapper be created?
    # 0 = Normal Function
    # 1 = Config scripts / functions and should only be sourced

    # LOCAL VARIABLES
    local FIND_COMMAND=""
    local FIND_REGEX=""
    local FILES_PROCESSED=0
    local FUNCTIONS_FOUND=0

    usage() {
        echo "Usage: generate_fish_wrappers [OPTIONS]"
        echo ""
        echo "Options:"
        echo "  --bashrc-dir, -i       Specify the directory containing Bash scripts (default: ~/.bashrc.d)"
        echo "  --fish-wrapper-file, -o Specify the output file for Fish wrappers (default: ~/.config/fish/bash_wrappers.fish)"
        echo "  --config, -c           Just source the bash files"
        echo "  --debug, -v            Enable debug mode for verbose output"
        echo "  --silent, -d           Disable debug and suppress most output"
        echo "  --help, -h             Display this help message"
        echo ""
        echo "Description:"
        echo "  This script generates Fish shell wrapper functions for Bash functions"
        echo "  defined in the specified directory. The generated wrappers allow you"
        echo "  to call Bash functions from the Fish shell."
        echo ""
        echo "Examples:"
        echo "  generate_fish_wrappers -i ~/.bashrc.d -o ~/.config/fish/bash_wrappers.fish"
        echo "  generate_fish_wrappers --debug"
    }

    # Parse CLI arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
        --bashrc-dir | -i)
            BASHRC_DIR="$2"
            shift 2
            ;;
        --fish-wrapper-file | -o)
            FISH_WRAPPER_FILE="$2"
            shift 2
            ;;
        --fish-wrapper-file | -o)
            FISH_WRAPPER_FILE="$2"
            shift 2
            ;;
        --config | -c)
            TYPE=1
            shift
            ;;
        --debug | -v)
            DEBUG=1
            shift
            ;;
        --silent | -d)
            SILENT=0
            shift
            ;;
        --help | -h)
            usage
            return 0
            ;;
        *)
            echo "❌ Unknown option: $1" >&2
            usage
            return 1
            ;;
        esac
    done

    ## Check Silent
    if [[ $SILENT == 0 ]]; then
        DEBUG=0
    fi

    [[ $DEBUG -eq 1 ]] && echo "Starting Script"

    mkdir -p "$(dirname "$FISH_WRAPPER_FILE")"
    echo "# Auto-generated Bash function wrappers from ~/.bashrc.d" >"$FISH_WRAPPER_FILE"
    echo "# Do not edit this file manually." >>"$FISH_WRAPPER_FILE"
    echo "" >>"$FISH_WRAPPER_FILE"

    # Tool detection
    local FIND_FUNCS
    if command -v rg >/dev/null 2>&1; then
        FIND_COMMAND="rg"
        FIND_REGEX='^(declare -f )?([a-zA-Z_][a-zA-Z0-9_]*)\(\)\s*\{'
        [[ $DEBUG -eq 1 ]] && echo "Using 'rg' with regex: '$FIND_REGEX'"
        FIND_FUNCS() {
            rg --no-heading --no-line-number -o "$FIND_REGEX" "$1" |
                sed -E 's/^(declare -f )?([a-zA-Z_][a-zA-Z0-9_]*)\(\)\s*\{.*/\2/' | sort -u
        }
    elif command -v grep >/dev/null 2>&1; then
        FIND_COMMAND="grep"
        FIND_REGEX='^(declare -f )?[a-zA-Z_][a-zA-Z0-9_]*()\s*\{'
        [[ $DEBUG -eq 1 ]] && echo "Using 'grep' with regex: '$FIND_REGEX'"
        FIND_FUNCS() {
            grep -E "$FIND_REGEX" "$1" |
                sed -E 's/^[[:space:]]*([a-zA-Z_][a-zA-Z0-9_]*)\(\)\s*\{.*/\1/' | sort -u
        }
    else
        [[ $SILENT -eq 1 ]] && echo "❌ Error: Neither 'rg' nor 'grep' is installed." >&2
        return 1
    fi

    # DETERMINE HOW TO WRAP
    case $TYPE in
    1)
        [[ $DEBUG -eq 1 ]] && echo "Skipping function search as TYPE is set to 1 (Config mode)."
        for file in $(find "$BASHRC_DIR" -type f -or -type l -follow -name "*.sh"); do
            FILES_PROCESSED=$((FILES_PROCESSED + 1))
            [[ $DEBUG -eq 1 ]] && echo "🔍 Processing file: $file"

            # Extract the base file name without the directory and extension
            local base_name
            base_name=$(basename "$file" .sh)

            # Generate the function name
            local function_name="bash_config_${base_name}"

            echo "function $function_name" >>"$FISH_WRAPPER_FILE"
            echo "  bash -c '. \"$file\";'" >>"$FISH_WRAPPER_FILE"
            echo "end" >>"$FISH_WRAPPER_FILE"
            echo "" >>"$FISH_WRAPPER_FILE"
        done
        [[ $DEBUG -eq 1 ]] && echo "Processed $FILES_PROCESSED files in Config mode."
        return 0
        ;;
    esac

    # Iterate files
    while IFS= read -r file; do
        FILES_PROCESSED=$((FILES_PROCESSED + 1))
        [[ $DEBUG -eq 1 ]] && echo "🔍 Processing file: $file"

        local file_functions_found=0
        while IFS= read -r func; do
            FUNCTIONS_FOUND=$((FUNCTIONS_FOUND + 1))
            file_functions_found=$((file_functions_found + 1))
            [[ $DEBUG -eq 1 ]] && echo "📎 Found function: $func (from: $file)" >&2

            # DETERMINE HOW TO WRAP
            case $TYPE in
            0)
                # TYPE 0 - Normal Function Wrapper
                echo "function $func" >>"$FISH_WRAPPER_FILE"
                echo "  bash -c 'source \"$file\"; $func \"\$@\"' -- \$argv" >>"$FISH_WRAPPER_FILE"
                echo "end" >>"$FISH_WRAPPER_FILE"
                echo "" >>"$FISH_WRAPPER_FILE"
                ;;
            esac
        done < <(FIND_FUNCS "$file")

        [[ $DEBUG -eq 1 ]] && echo "Found $file_functions_found functions in $file."
    done < <(find "$BASHRC_DIR" -type f -or -type l -follow -name "*.sh")

    if [[ $FILES_PROCESSED -eq 0 ]]; then
        [[ $SILENT -eq 1 ]] && echo "⚠️ Warning: No .sh files found in '$BASHRC_DIR' (or the target of its symlink)."
    elif [[ $FUNCTIONS_FOUND -eq 0 ]]; then
        [[ $SILENT -eq 1 ]] && echo "ℹ️ Info: No Bash functions found in the processed .sh files."
    fi

    [[ $DEBUG -eq 1 ]] && echo "Processed $FILES_PROCESSED files."
    [[ $DEBUG -eq 1 ]] && echo "Found $FUNCTIONS_FOUND functions."

    [[ $SILENT -eq 1 ]] && echo "✅ Fish wrapper functions written to: $FISH_WRAPPER_FILE"
    [[ $SILENT -eq 1 ]] && echo "💡 Add this to your ~/.config/fish/config.fish:"
    [[ $SILENT -eq 1 ]] && echo "  source '$FISH_WRAPPER_FILE'"
    return 0
}
